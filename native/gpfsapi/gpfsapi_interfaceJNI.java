/*
 *
 *  Copyright (c) Istituto Nazionale di Fisica Nucleare (INFN). 2006-2010.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package it.grid.storm.filesystem.swig;

class gpfsapi_interfaceJNI {

  static {
    try {
      System.loadLibrary("gpfsapi_interface");
    } catch (UnsatisfiedLinkError e) {
	  final String libfile 
			= "'" + System.mapLibraryName("gpfsapi_interface") + "'";
	  final org.slf4j.Logger log 
			= org.slf4j.LoggerFactory.getLogger(gpfsapi_interfaceJNI.class);
      log.error("Native code library " + libfile
				 + " failed to load: " + e.getMessage());
	  // give some informational details, may be useful when debugging
	  final String ldpath = System.getProperty("java.library.path");
	  if (null != ldpath) 
	    log.info("Java VM searched for " + libfile 
            + "in java.library.path: " + ldpath);
   	  else
		log.info("Java VM library search path is null!");
      log.info("Add the library location to the environment variable LD_LIBRARY_PATH or to the Java property java.library.path");
	  throw new UnsatisfiedLinkError("Native code library " + libfile
				 + " failed to load: " + e.getMessage());
    }
  }

  public final static native long new_gpfs(String jarg1);
  public final static native void gpfs_prealloc(long jarg1, String jarg2, long jarg3);
  public final static native long gpfs_get_exact_size(long jarg1, String jarg2);
  public final static native long gpfs_get_exact_last_modification_time(long jarg1, String jarg2);
  public final static native int gpfs_truncate_file(long jarg1, String jarg2, long jarg3);
  public final static native long gpfs_new_acl(long jarg1);
  public final static native void delete_gpfs(long jarg1);
  public final static native long new_gpfs31_acl();
  public final static native void gpfs31_acl_load__SWIG_0(long jarg1, String jarg2, boolean jarg3);
  public final static native void gpfs31_acl_load__SWIG_1(long jarg1, String jarg2);
  public final static native void gpfs31_acl_enforce(long jarg1, String jarg2);
  public final static native void delete_gpfs31_acl(long jarg1);
  public final static native long new_gpfs23(String jarg1);
  public final static native void gpfs23_prealloc(long jarg1, String jarg2, long jarg3);
  public final static native long gpfs23_get_exact_size(long jarg1, String jarg2);
  public final static native long gpfs23_get_exact_last_modification_time(long jarg1, String jarg2);
  public final static native long gpfs23_new_acl(long jarg1);
  public final static native void delete_gpfs23(long jarg1);
  public final static native long new_gpfs23_acl();
  public final static native void gpfs23_acl_clear(long jarg1);
  public final static native void gpfs23_acl_load__SWIG_0(long jarg1, String jarg2, boolean jarg3);
  public final static native void gpfs23_acl_load__SWIG_1(long jarg1, String jarg2);
  public final static native void gpfs23_acl_enforce(long jarg1, String jarg2);
  public final static native boolean gpfs23_acl_set_mmgetacl(String jarg1);
  public final static native boolean gpfs23_acl_set_mmputacl(String jarg1);
  public final static native void delete_gpfs23_acl(long jarg1);
  public final static native long SWIGgpfsUpcast(long jarg1);
  public final static native long SWIGgpfs31_aclUpcast(long jarg1);
  public final static native long SWIGgpfs23Upcast(long jarg1);
  public final static native long SWIGgpfs23_aclUpcast(long jarg1);
}
